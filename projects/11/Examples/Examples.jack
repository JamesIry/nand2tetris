class Examples {
    static int foo;
    field int bar;
    field Examples other;

    function void void_function() {
        return;
    }

    function int static_function() {
        return foo;
    }

    function int multi_parameter_function(int a, int b, int c) {
        return b;
    }

    constructor Examples simple_constructor() {
        return this;
    }

    method int field_method() {
        return bar;
    }

    function String string_literal() {
        return "hello";
    }

    function bool true_literal() {
        return true;
    } 

    function bool false_literal() {
        return false;
    }

    function String null_literal() {
        return null;
    }

    function int neg_unary() {
        return -1;
    }

    function in not_unary() {
        return ~false;
    }

    function int call_static_function() {
        return Examples.static_function();
    }

    method int call_unqualified_method() {
        return field_method();
    }

    method int call_field_method() {
        return other.field_method();
    }

    function int call_multi_parameter_function() {
        return Experiement.multi_parameter_function(1, 2, 3);
    }

    function int add_expression() {
        return 1+2;
    }

    function int sub_expression() {
        return 1-2;
    }

    function int mult_expression() {
        return 1*2;
    }

    function int div_expression() {
        return 1/2;
    }

    function bool and_expression() {
        return false & false;
    }

    function bool or_expression() {
        return false | false;
    }

    function bool gt_expression() {
        return 1>2;
    }

    function bool lt_expression() {
        return 1<2;
    }

    function bool eq_expression() {
        return 1=2;
    }

    function int indexed_expression(Array a) {
        return a[42];
    }

    function int complex_expression() {
        return 1+2+(3*4);
    }

    function void do_statement() {
        do Examples.static_function();
        return;
    }

    function int local_let_statement() {
        var int a;
        let a = 1;
        return a;
    }

    function int arg_let_statement(int a) {
        let a = 1;
        return a;
    }

    method int field_let_statement() {
        let bar = 1;
        return bar;
    }

    function int static_let_statement() {
        let foo = 1;
        return foo;
    }

    function int indexed_let_statement(Array a) {
        let a[42] = 1;
        return a[42];
    }

    function int if_statement(int a, int b) {
        if (a < b) {
            let b=a;
        }
        return b;
    }

    function int if_else_statement(int a, int b) {
        var int c;

        if (a < b) {
            let c=a;
        } else {
            let c=b;
        }

        return c;
    }

    function int while_statement(int a, int b) {
        var int c;

        let c = 1;

        while (a < b) {
            let c=c*2;
            let a=a+1;
        }

        return a;
    }

    function int multiple_if_statement(int a, int b) {
        var int c;
        
        if (a < b) {
            let c=a;
        } else {
            let c=b;
        }

        if (b=42) {
            let c=47;
        } else {
            let a=2;
        }

        return c;
    }
}