// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory, free_list;

    /** Initializes the class. */
    function void init() {
        let memory = null;

        let free_list = 2048;
        let free_list[0] = 32758-2048-1;
        let free_list[1] = null;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int new_size;
        var Array prev, list, next;

        let prev = null;
        let list = free_list;

        while (~(list=null) & ((list[0] - 1) < size)) {
            let prev = list;
            let list = list[1];
        }

        if (list = null) {
            do Sys.halt(); // TODO print an error and halt
        }

        let new_size = list[0] - size - 1;
        if (new_size > 0) {
            let next = list + size + 1;
            let next[0] = new_size;
            let next[1] = list[1];
        } else {
            let next = list[1];
        }

        if (prev = null) {
            let free_list = next;
        } else {
            let prev[1] = next;
        }

        let list[0] = size;
        return list+1;
        
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array node, next, prev;
        var int size;

        let node = o-1;
        let size = node[0];

        let next = free_list;
        let prev = null;

        while (~(next = null) & (next < node)) {
            let prev = next;
            let next = next[1];
        }

        if (prev=null) {
            let free_list = node;
        } else {
            if ((prev+prev[0]+1) = node) {
                let prev[0] = prev[0] + node[0] + 1;
                let node = prev;
            } else {
                let prev[1] = node;
            }
        }

        if ((node+node[0]+1) = next) {
            let node[0] = node[0] + next[0] + 1;
            let next = next[1];       
        }

        let node[1] = next;
        return;
    }    
}
